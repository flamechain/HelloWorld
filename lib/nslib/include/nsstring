#ifndef NSSTRING_H
#define NSSTRING_H

#include <cstring>
#include "nsvector"

// User-friendly std::string/char *
class string {
private:
    char * strValue;

public:
    string() {
        this->strValue = (char *)"";
    }

    string(const char * str) {
        this->strValue = (char *)str;
    }

    string(char s) {
        this->strValue = (char *)"a";
        this->strValue[0] = s;
    }

    string(char * str) {
        this->strValue = str;
    }

    // Returns char* form
    const char * c_str() {
        return (const char *)this->strValue;
    }
    // Gets a char
    char operator[](int i) {
        return this->strValue[i];
    }

    // comparison
    bool operator==(string n) {
        if (this->strValue == n.c_str()) return true;
        return false;
    }
    bool operator==(const char * n) {
        if (this->strValue == (char *)n) return true;
        return false;
    }
    bool operator==(char n) {
        string ns = n;
        if (this->strValue == ns.strValue) return true;
        return false;
    }

    // comparison
    bool operator!=(string n) {
        if (this->strValue != n.c_str()) return true;
        return false;
    }
    bool operator!=(const char * n) {
        if (this->strValue != (char *)n) return true;
        return false;
    }
    bool operator!=(char n) {
        string ns = n;
        if (this->strValue != ns.strValue) return true;
        return false;
    }

    // Adds string and n
    string operator+(string n) {
        string ret = this->strValue;
        ret += n;
        return ret;
    }
    string operator+(const char * n) {
        string ret = this->strValue;
        ret += n;
        return ret;
    }
    string operator+(char n) {
        string ret = this->strValue;
        ret += n;
        return ret;
    }

    // Appends n
    void operator+=(string n) {
        vector<char> q;
        for (int i=0; i<strlen(this->strValue); i++) {
            q.append(this->strValue[i]);
        }
        for (int i=0; i<strlen(n.c_str()); i++) {
            q.append(n.c_str()[i]);
        }
        q.append('\00');
        this->strValue = q.toArray();
    }
    void operator+=(const char * n) {
        vector<char> q;
        for (int i=0; i<strlen(this->strValue); i++) {
            q.append(this->strValue[i]);
        }
        for (int i=0; i<strlen(n); i++) {
            q.append(n[i]);
        }
        q.append('\00');
        this->strValue = q.toArray();
    }
    void operator+=(char n) {
        vector<char> q;

        for (int i=0; i<strlen(this->strValue); i++) {
            q.append(this->strValue[i]);
        }

        q.append(n);
        q.append('\00');

        this->strValue = (char *)string(q.toArray()).c_str();
    }

    // Splits on delim
    vector<string> split(string delim) {
        vector<string> ret;
        return ret;
    }
    vector<string> split(const char * delim) {
        vector<string> ret;
        return ret;
    }
    vector<string> split(char delim) {
        vector<string> ret;
        string cur;
        for (int i=0; i<strlen(this->strValue); i++) {
            if (this->strValue[i] == delim) {
                ret.append(cur);
                cur = "";
            } else {
                cur += this->strValue[i];
            }
        }
        ret.append(cur);
        return ret;
    }

    // Checks if string startswith n
    bool startswith(string n) {
        return false;
    }
    bool startswith(const char * n) {
        return false;
    }
    bool startswith(char n) {
        if (this->strValue[0] == n) return true;
        else return false;
    }

};

#endif

#ifndef NSSTRING_H
#define NSSTRING_H

#include <cstring>
#include "nsvector"

// User-friendly std::string/char *
class string {
private:
    char * strValue;

public:
    string() {
        this->strValue = (char *)"";
    }

    string(const char * str) {
        this->strValue = (char *)str;
    }

    string(char s) {
        this->strValue = (char *)"a";
        this->strValue[0] = s;
    }

    string(char * str) {
        this->strValue = str;
    }

    // Returns char* form
    const char * c_str();
    // Gets a char
    char operator[](int);

    // comparison
    bool operator==(string);
    bool operator==(const char *);
    bool operator==(char);

    // comparison
    bool operator!=(string);
    bool operator!=(const char *);
    bool operator!=(char);

    // Adds string and n
    string operator+(string);
    string operator+(const char *);
    string operator+(char);

    // Appends n
    void operator+=(string);
    void operator+=(const char *);
    void operator+=(char);

    // Splits on delim
    vector<string> split(string);
    vector<string> split(const char *);
    vector<string> split(char);

    // Checks if string startswith n
    bool startswith(string);
    bool startswith(const char *);
    bool startswith(char);

};

#endif

#pragma once
#ifndef _NSSTRING_
#define _NSSTRING_

// #include "nsvector"
#include <xnsmem0>

template<class _Elem,
    class _Alloc = allocator<_Elem>>
    class basic_string
    {
public:
    using value_type = typename _Alloc::value_type;
    using size_type = typename _Alloc::size_type;
    using pointer = typename _Alloc::pointer;
    using const_pointer = typename _Alloc::const_pointer;

private:
    pointer _MY_PTR = nullptr;
    size_type _MY_SIZE = 0;
    size_type _MY_RES = 0;
    _Alloc _Al;

public:

    basic_string(const basic_string& _Right)
        {
        const size_type _Right_size = _Right._Mysize();
        const _Elem * const _Right_ptr = _Right._Myptr(); // pointer type is not const
        const size_type _Right_res = _Right._Myres();

        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    basic_string()
        {
        this->_Tidy_init();
        }

    basic_string(const_pointer _Right)
        {
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        const _Elem * const _Right_ptr = _Right;
        const size_type _Right_res = _Right_size;

        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    basic_string(const_pointer _Right, const size_type _Size)
        {
        const _Elem * const _Right_ptr = _Right;

        this->_Construct_contents(_Right_ptr, _Size, _Size);
        }

    explicit basic_string(pointer _Right)
        {
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        pointer _New_ptr = this->_Al.allocate(_Right_size);

        for (int i=0; i<_Right_size; i++)
            {
            _New_ptr[i] = _Right[i];
            }

        _New_ptr[_Right_size] = '\00';

        const _Elem * const _Right_ptr = _New_ptr;
        const size_type _Right_res = _Right_size;

        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    explicit basic_string(pointer _Right, const size_type _Size)
        {
        pointer _New_ptr = this->_Al.allocate(_Size);

        for (int i=0; i<_Size; i++)
            {
            _New_ptr[i] = _Right[i];
            }

        _New_ptr[_Size] = '\00';

        const _Elem * const _Right_ptr = _New_ptr;

        this->_Construct_contents(_Right_ptr, _Size, _Size);
        }

    explicit basic_string(value_type _Right)
        {
        pointer _New_ptr = this->_Al.allocate(1);
        _New_ptr[0] = _Right;

        const size_type _Right_size = 1;
        const _Elem * const _Right_ptr = _New_ptr;
        const size_type _Right_res = 1;

        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    void _Construct_contents(const_pointer _Right_ptr, const size_type _Right_size, const size_type _Right_res)
        {
        if (_Right_size < this->_Myres())
            {
            this->copy(_Right_ptr, _Right_size);
            this->_MY_SIZE = _Right_size;
            return;
            }

        const size_type _New_capacity = _Right_size;
        const pointer _New_array = this->_Al.allocate(_Right_size);
        this->copy(_Right_ptr, _New_capacity, _New_array);
        this->_MY_SIZE = _Right_size;
        this->_MY_RES = _Right_res;
        }

    void copy(const_pointer _Array, size_type _Capacity)
        {
        for (int i=0; i<_Capacity; i++)
            {
            this->_MY_PTR[i] = _Array[i];
            }
        }

    void copy(const_pointer _Array, size_type _Capacity, const pointer _New_array)
        {
        this->_Al.deallocate(this->_Myptr());
        this->_MY_PTR = _New_array;
        this->copy(_Array, _Capacity);
        }

    void _Tidy_init()
        {
        this->_MY_SIZE = 0;
        this->_MY_RES = 0;
        this->_MY_PTR = nullptr;
        }

    _Alloc _Getal() const
        {
        return this->_Al;
        }

    const pointer _Myptr() const
        {
        return this->_MY_PTR;
        }

    size_type _Mysize() const
        {
        return this->_MY_SIZE;
        }

    size_type _Myres() const
        {
        return this->_MY_RES;
        }

    size_type _Get_pointer_size(const_pointer _Ptr)
        {
        size_type _Ptr_strterm;

        for (_Ptr_strterm=0; ; _Ptr_strterm++)
            {
            if (_Ptr[_Ptr_strterm] == '\00')
                {
                break;
                }
            }

        return _Ptr_strterm;
        }

    size_type _Get_pointer_size(pointer _Ptr)
        {
        const_pointer _New_ptr = _Ptr;
        return this->_Get_pointer_size(_New_ptr);
        }

    int _Compare_pointer_values(pointer _Left, pointer _Right)
        {
        const size_type _Left_size = this->_Get_pointer_size(_Left);
        const size_type _Right_size = this->_Get_pointer_size(_Right);

        if (_Left_size != _Right_size)
            {
            return 0;
            }

        for (int i=0; i<_Left_size; i++)
            {
            if (_Left[i] != _Right[i])
                {
                return 0;
                }
            }

        return 1;
        }

// external methods

    const_pointer c_str() const
        {
        pointer _New_ptr = this->_Al.allocate(this->_Mysize());

        for (int i=0; i<this->_Mysize(); i++)
            {
            _New_ptr[i] = this->_Myptr()[i];
            }

        _New_ptr[this->_Mysize()] = '\00';

        const_pointer _New_const_ptr = _New_ptr;
        return _New_const_ptr;
        }

    size_type length() const
        {
        return this->_Mysize();
        }

    // pointer * split(const basic_string& _Delim)
    //     {
    //     }

    // pointer * split(const_pointer _Delim)
    //     {
    //     }

    // pointer * split(value_type _Delim)
    //     {
    //     }

    int startswith(const basic_string& _Sub)
        {
        return this->startswith(_Sub.c_str()); // bad practice, but prevents duplicate code / uneccessary abstraction functions
        }

    int startswith(const_pointer _Sub)
        {
        const size_type _Sub_size = this->_Get_pointer_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (int i=0; i<this->_Mysize(); i++)
            {
            if (i < _Sub_size)
                {
                if (this->_Myptr()[i] != _Sub[i])
                    {
                    return 0;
                    }
                }
            }

        return 1;
        }

    int startswith(value_type _Sub)
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[0] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    int endswith(const basic_string& _Sub)
        {
        }

    int endswith(const_pointer _Sub)
        {
        const size_type _Sub_size = this->_Get_pointer_size(_Sub);
        }

    int endswith(value_type _Sub)
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[this->_Mysize()-1] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    // int contains(const basic_string& _Sub)
    //     {
    //     }

    // int contains(const_pointer _Sub)
    //     {
    //     }

    // int contains(value_type _Sub)
    //     {
    //     }

    // basic_string join(pointer * _Elems)
    //     {
    //     }

    // basic_string substring(size_type _Start)
    //     {
    //     }

    // basic_string substring(size_type _Start, size_type _End)
    //     {
    //     }

// seperate operators from other functions

    int operator==(const basic_string& _Right)
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right._Myptr()))
            {
            return 1;
            }

        return 0;
        }

    int operator==(const_pointer _Right)
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right))
            {
            return 0;
            }

        return 1;
        }

    int operator==(value_type _Right)
        {
        if (this->_Mysize() == 1) // nested prevents error if _MY_SIZE = 0
            {
            if (this->_Myptr()[0] == _Right)
                {
                return 1;
                }
            }

        return 0;
        }

    int operator!=(const basic_string& _Right)
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right._Myptr()))
            {
            return 0;
            }

        return 1;
        }

    int operator!=(const_pointer _Right)
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right))
            {
            return 0;
            }

        return 1;
        }

    int operator!=(value_type _Right)
        {
        if (this->_Mysize() == 1) // nested prevents error if _MY_SIZE = 0
            {
            if (this->_Myptr()[0] == _Right)
                {
                return 0;
                }
            }

        return 1;
        }

    basic_string operator+(const basic_string& _Right)
        {
        basic_string _Copy;
        _Copy += this->c_str();
        _Copy += _Right;

        return _Copy;
        }

    basic_string operator+(const_pointer _Right)
        {
        basic_string _Copy;
        _Copy += this->c_str();
        _Copy += _Right;

        return _Copy;
        }

    basic_string operator+(value_type _Right)
        {
        basic_string _Copy;
        _Copy += this->c_str();
        _Copy += _Right;

        return _Copy;
        }

    void operator+=(const basic_string& _Right)
        {
        const size_type _Right_size = _Right._Mysize();
        const size_type _Right_res = _Right._Myres();
        const _Elem * const _Right_ptr = _Right._Myptr();

        if (this->_Myres() >= this->_Mysize() + _Right_size)
            {
            for (int i=0; i<_Right_size; i++)
                {
                this->_Myptr()[this->_Mysize()+i] = _Right_ptr[i];
                }

            this->_MY_SIZE += _Right_size;
            this->_Myptr()[this->_Mysize()] = '\00';
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        const pointer _New_array = this->_Al.allocate(_New_capacity);

        for (int i=0; i<this->_Mysize(); i++)
            {
            _New_array[i] = this->_Myptr()[i];
            }

        for (int i=0; i<_Right_size; i++)
            {
            _New_array[this->_Mysize()+i] = _Right_ptr[i];
            }

        _New_array[_New_capacity] = '\00';

        this->_Al.deallocate(this->_Myptr());
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void operator+=(const_pointer _Right)
        {
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        const size_type _Right_res = _Right_size;

        if (this->_Myres() >= this->_Mysize() + _Right_size)
            {
            for (int i=0; i<_Right_size; i++)
                {
                this->_Myptr()[this->_Mysize()+i] = _Right[i];
                }

            this->_MY_SIZE += _Right_size;
            this->_Myptr()[this->_Mysize()] = '\00';
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        const pointer _New_array = this->_Al.allocate(_New_capacity);

        for (int i=0; i<this->_Mysize(); i++)
            {
            _New_array[i] = this->_Myptr()[i];
            }

        for (int i=0; i<_Right_size; i++)
            {
            _New_array[this->_Mysize()+i] = _Right[i];
            }

        _New_array[_New_capacity] = '\00';

        this->_Al.deallocate(this->_Myptr());
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void operator+=(value_type _Right)
        {
        if (this->_Myres() >= this->_Mysize() + 1)
            {
            this->_Myptr()[this->_Mysize()] = _Right;
            this->_Myptr()[this->_Mysize()+1] = '\00';
            return;
            }

        const size_type _New_capacity = this->_Mysize()+1;
        const pointer _New_array = this->_Al.allocate(_New_capacity);
        this->_MY_SIZE = this->_Mysize() + 1;
        this->_MY_RES = this->_Mysize() + 1;

        for (int i=0; i<_New_capacity-1; i++)
            {
            _New_array[i] = this->_Myptr()[i];
            }

        _New_array[_New_capacity-1] = _Right;
        _New_array[_New_capacity] = '\00';

        this->_Al.deallocate(this->_Myptr());
        this->_MY_PTR = _New_array;
        }

    value_type operator[](size_type _Index) const
        {
        return this->_Myptr()[_Index];
        }

    };

using string = basic_string<char, allocator<char>>;

#endif

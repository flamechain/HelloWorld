// NSLib string header
#pragma once
#ifndef _NSSTRING_
#define _NSSTRING_

#include <stdio.h> // temp, for debugging
#include <nsvector>
#include <xnsmem0>

template<class _Elem,
    class _Alloc = allocator<_Elem>>
    class basic_string
    {
private:
    using _Mybase = _Alloc;
    // using traits_type = _Traits; // consider adding traits instead of a having data as class variables
    using allocator_type = _Alloc;

    using value_type = typename _Mybase::value_type;
    using size_type = typename _Mybase::size_type;
    using pointer = typename _Mybase::pointer;
    using const_pointer = typename _Mybase::const_pointer;

    using reference = value_type&;
    using const_reference = const value_type&;


    pointer _MY_PTR;
    size_type _MY_SIZE;
    size_type _MY_RES;
    _Alloc _Al;

public:

    basic_string(const basic_string& _Right)
        {
        this->_Tidy_init();
        const size_type _Right_size = _Right._Mysize();
        const_pointer _Right_ptr = _Right._Myptr();
        const size_type _Right_res = _Right._Myres();
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    basic_string()
        {
        this->_Tidy_init();
        }

    basic_string(const_pointer _Right)
        {
        this->_Tidy_init();
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        const_pointer _Right_ptr = _Right;
        const size_type _Right_res = _Right_size;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    basic_string(const_pointer _Right, const size_type _Size)
        {
        this->_Tidy_init();
        const_pointer _Right_ptr = _Right;
        this->_Construct_contents(_Right_ptr, _Size, _Size);
        }

    explicit basic_string(pointer _Right)
        {
        this->_Tidy_init();
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        pointer const _New_ptr = this->_Al.allocate(_Right_size);

        for (size_type i=0; i<_Right_size; i++)
            {
            _New_ptr[i] = _Right[i];
            }

        _New_ptr[_Right_size] = '\00';

        const_pointer _Right_ptr = _New_ptr;
        const size_type _Right_res = _Right_size;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    explicit basic_string(pointer _Right, const size_type _Size)
        {
        this->_Tidy_init();
        pointer const _New_ptr = this->_Al.allocate(_Size);

        for (size_type i=0; i<_Size; i++)
            {
            _New_ptr[i] = _Right[i];
            }

        _New_ptr[_Size] = '\00';

        const_pointer _Right_ptr = _New_ptr;
        this->_Construct_contents(_Right_ptr, _Size, _Size);
        }

    explicit basic_string(const_reference _Right)
        {
        this->_Tidy_init();
        pointer const _New_ptr = this->_Al.allocate(1);
        _New_ptr[0] = _Right;
        _New_ptr[1] = '\00';

        const size_type _Right_size = 1;
        const_pointer _Right_ptr = _New_ptr;
        const size_type _Right_res = 1;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    ~basic_string()
        {
        this->_Al.deallocate(this->_MY_PTR);
        }

    // not in operator sections because these are treated as re-init-constructors
    void operator=(const basic_string& _Right)
        {
        this->_Reset();
        const size_type _Right_size = _Right._Mysize();
        const size_type _Right_res = _Right._Myres();
        const_pointer _Right_ptr = _Right._Myptr();
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    void operator=(const_pointer _Right)
        {
        this->_Reset();
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        this->_Construct_contents(_Right, _Right_size, _Right_size);
        }

    void operator=(const_reference _Right)
        {
        this->_Reset();
        pointer const _Right_new = this->_Al.allocate(2);
        _Right_new[0] = _Right;
        _Right_new[1] = '\00';

        const size_type _Right_size = 1;
        const size_type _Right_res = 2;
        const_pointer _Right_ptr = _Right_new;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    void _Reset()
        {
        if (this->_Myres() > 0)
            {  
            this->_Al.deallocate(this->_MY_PTR);
            }

        this->_Tidy_init();
        }

    void _Construct_contents(const_pointer _Right_ptr, const size_type _Right_size, const size_type _Right_res)
        {
        if (_Right_size < this->_Myres())
            {
            this->_Copy(_Right_ptr, _Right_size);
            this->_MY_SIZE = _Right_size;
            return;
            }

        const size_type _New_capacity = _Right_size;
        pointer const _New_array = this->_Al.allocate(_Right_size);
        this->_Copy(_Right_ptr, _New_capacity, _New_array);
        this->_MY_SIZE = _Right_size;
        this->_MY_RES = _Right_res;
        }

    void _Copy(const_pointer _Array, size_type _Capacity)
        {
        for (size_type i=0; i<_Capacity; i++)
            {
            this->_MY_PTR[i] = _Array[i];
            }

        this->_MY_PTR[_Capacity] = '\00';
        }

    void _Copy(const_pointer _Array, size_type _Capacity, pointer _New_array)
        {
        this->_Al.deallocate(this->_MY_PTR);
        this->_MY_PTR = _New_array;
        this->_Copy(_Array, _Capacity);
        }

    basic_string _Create_copy() const
        {
        basic_string _Copy = (basic_string)this->_Myptr();
        return _Copy;
        }

    void _Tidy_init()
        {
        this->_MY_PTR = this->_Al.allocate(1);
        this->_MY_PTR[0] = '\00';

        this->_MY_SIZE = 0;
        this->_MY_RES = 1;
        }

    _Alloc _Getal() const
        {
        return this->_Al;
        }

    pointer _Myptr() const
        {
        return this->_MY_PTR;
        }

    size_type _Mysize() const
        {
        return this->_MY_SIZE;
        }

    size_type _Myres() const
        {
        return this->_MY_RES;
        }

    size_type _Get_pointer_size(const_pointer _Ptr) const
        {
        size_type _Ptr_strterm;

        for (_Ptr_strterm=0; ; _Ptr_strterm++)
            {
            if (_Ptr[_Ptr_strterm] == '\00')
                {
                break;
                }
            }

        return _Ptr_strterm;
        }

    size_type _Get_pointer_size(pointer _Ptr) const
        {
        const_pointer _New_ptr = _Ptr;
        return this->_Get_pointer_size(_New_ptr);
        }

    int _Compare_pointer_values(pointer _Left, pointer _Right) const
        {
        const size_type _Left_size = this->_Get_pointer_size(_Left);
        const size_type _Right_size = this->_Get_pointer_size(_Right);

        if (_Left_size != _Right_size)
            {
            return 0;
            }

        for (size_type i=0; i<_Left_size; i++)
            {
            if (_Left[i] != _Right[i])
                {
                return 0;
                }
            }

        return 1;
        }

    basic_string * _Increase_array_alloc(basic_string * _Array, size_type _Size, size_type _Count) const
        {
        basic_string * _New_seg = new basic_string[_Size+_Count];

        for (size_type i=0; i<_Size; i++)
            {
            _New_seg[i] = _Array[i];
            }

        delete[] _Array; // may cause issues
        return _New_seg;
        }

    void _Copy_into(pointer _Left, const pointer _Right) const
        {
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        this->_Copy_into(_Left, _Right, _Right_size);
        }

    void _Copy_into(pointer _Left, const pointer _Right, size_type _Right_size) const
        {
        for (size_type i=0; i<_Right_size; i++)
            {
            _Left[i] = _Right[i];
            }
        }

    pointer _Get_pointer_copy(const_pointer _Ptr) const
        {
        const size_type _Ptr_size = this->_Get_pointer_size(_Ptr);
        pointer const _Copy = this->_Al.allocate(_Ptr_size);

        for (size_type i=0; i<_Ptr_size; i++)
            {
            _Copy[i] = _Ptr[i];
            }

        _Copy[_Ptr_size] = '\00';
        return _Copy;
        }

    void _Add_two_pointers(pointer _Array, pointer _Left_ptr, pointer _Right_ptr) const
        {
        const size_type _Left_size = this->_Get_pointer_size(_Left_ptr);
        const size_type _Right_size = this->_Get_pointer_size(_Right_ptr);
        return this->_Add_two_pointers(_Array, _Left_ptr, _Right_ptr, _Left_size, _Right_size);
        }

    void _Add_two_pointers(pointer _Array, pointer _Left_ptr, pointer _Right_ptr, size_type _Left_size, size_type _Right_size) const
        {
        for (size_type i=0; i<_Left_size; i++)
            {
            _Array[i] = _Left_ptr[i];
            }

        for (size_type i=0; i<_Right_size; i++)
            {
            _Array[_Left_size+i] = _Right_ptr[i];
            }
        }

    pointer _Add_two_pointers(const pointer _Left, const const_pointer _Right) const
        {
        return this->_Add_two_pointers(_Left, this->_Get_pointer_copy(_Right));
        }

    pointer _Add_two_pointers(const pointer _Left, const pointer _Right) const
        {
        const size_type _Left_size = this->_Get_pointer_size(_Left);
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        return this->_Add_two_pointers(_Left, _Right, _Left_size, _Right_size);
        }

    pointer _Add_two_pointers(const pointer _Left_ptr, const const_pointer _Right_ptr, size_type _Left_size, size_type _Right_size) const
        {
        return this->_Add_two_pointers(_Left_ptr, this->_Get_pointer_copy(_Right_ptr), _Left_size, _Right_size);
        }

    pointer _Add_two_pointers(const pointer _Left_ptr, const pointer _Right_ptr, size_type _Left_size, size_type _Right_size) const
        {
        const size_type _New_capacity = _Left_size + _Right_size;
        pointer const _Combined = this->_Al.allocate(_New_capacity);

        for (size_type i=0; i<_Left_size; i++)
            {
            _Combined[i] = _Left_ptr[i];
            }

        for (size_type i=0; i<_Right_size; i++)
            {
            _Combined[_Left_size+i] = _Right_ptr[i];
            }

        _Combined[_New_capacity] = '\00';

        return _Combined;
        }

// operators

    int operator==(const basic_string& _Right) const
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right._Myptr()))
            {
            return 1;
            }

        return 0;
        }

    int operator==(const_pointer _Right) const
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right))
            {
            return 0;
            }

        return 1;
        }

    int operator==(const_reference _Right) const
        {
        if (this->_Mysize() == 1) // nested prevents error if _MY_SIZE = 0
            {
            if (this->_Myptr()[0] == _Right)
                {
                return 1;
                }
            }

        return 0;
        }

    int operator!=(const basic_string& _Right) const
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right._Myptr()))
            {
            return 0;
            }

        return 1;
        }

    int operator!=(const_pointer _Right) const
        {
        if (this->_Compare_pointer_values(this->_Myptr(), _Right))
            {
            return 0;
            }

        return 1;
        }

    int operator!=(const_reference _Right) const
        {
        if (this->_Mysize() == 1) // nested prevents error if _MY_SIZE = 0
            {
            if (this->_Myptr()[0] == _Right)
                {
                return 0;
                }
            }

        return 1;
        }

    void operator+=(const basic_string& _Right)
        {
        const size_type _Right_size = _Right._Mysize();
        const size_type _Right_res = _Right._Myres();
        const_pointer _Right_ptr = _Right._Myptr();

        if (this->_Myres() > this->_Mysize() + _Right_size)
            {
            for (size_type i=0; i<_Right_size; i++)
                {
                this->_Myptr()[this->_Mysize()+i] = _Right_ptr[i];
                }

            this->_MY_SIZE += _Right_size;
            this->_Myptr()[this->_Mysize()] = '\00';
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        pointer const _New_array = this->_Add_two_pointers(this->_Myptr(), _Right_ptr, this->_Mysize(), _Right_size);

        this->_Al.deallocate(this->_MY_PTR);
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void operator+=(const_pointer _Right)
        {
        const size_type _Right_size = this->_Get_pointer_size(_Right);
        const size_type _Right_res = _Right_size;

        if (this->_Myres() > this->_Mysize() + _Right_size)
            {
            for (size_type i=0; i<_Right_size; i++)
                {
                this->_Myptr()[this->_Mysize()+i] = _Right[i];
                }

            this->_MY_SIZE += _Right_size;
            this->_Myptr()[this->_Mysize()] = '\00';
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        pointer const _New_array = this->_Add_two_pointers(this->_Myptr(), _Right, this->_Mysize(), _Right_size);

        this->_Al.deallocate(this->_MY_PTR);
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void operator+=(const_reference _Right)
        {
        if (this->_Myres() > this->_Mysize() + 1)
            {
            this->_Myptr()[this->_Mysize()] = _Right;
            this->_Myptr()[this->_Mysize()+1] = '\00';
            this->_MY_SIZE++;
            return;
            }

        const size_type _New_capacity = this->_Mysize()+1;
        pointer const _New_array = this->_Al.allocate(_New_capacity);
        this->_Copy_into(_New_array, this->_Myptr(), this->_Mysize());

        _New_array[this->_Mysize()] = _Right;
        _New_array[_New_capacity] = '\00';
        printf("    op+=(ref) call _Al.deallocate ... ");
        this->_Al.deallocate(this->_MY_PTR);
        printf("done\n");
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    pointer operator+(const basic_string& _Right) const
        {
        pointer const _Copy = this->_Add_two_pointers(this->_Myptr(), _Right._Myptr());
        return _Copy;
        }

    pointer operator+(const_pointer _Right) const
        {
        pointer const _Copy = this->_Add_two_pointers(this->_Myptr(), _Right);
        return _Copy;
        }

    pointer operator+(const_reference _Right) const
        {
        pointer const _Right_ptr = this->_Al.allocate(2);

        _Right_ptr[0] = _Right;
        _Right_ptr[1] = '\00';

        pointer const _Copy = this->_Add_two_pointers(this->_Myptr(), _Right_ptr);
        return _Copy;
        }

    reference operator[](size_type _Index) const
        {
        if (_Index < this->_Mysize())
            {
            return this->_Myptr()[_Index];
            }

        return '\00'; // null
        }

// external methods

    const_pointer c_str() const
        {
        pointer const _New_ptr = this->_Al.allocate(this->_Mysize());

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            _New_ptr[i] = this->_Myptr()[i];
            }

        _New_ptr[this->_Mysize()] = '\00';

        const_pointer _New_const_ptr = _New_ptr;
        return _New_const_ptr;
        }

    size_type size() const
        {
        return this->_Mysize();
        }

    size_type length() const
        {
        return this->size();
        }

    int startswith(const basic_string& _Sub) const
        {
        return this->startswith(_Sub.c_str());
        }

    int startswith(const_pointer _Sub) const
        {
        const size_type _Sub_size = this->_Get_pointer_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (i < _Sub_size)
                {
                if (this->_Myptr()[i] != _Sub[i])
                    {
                    return 0;
                    }
                }
            }

        return 1;
        }

    int startswith(const_reference _Sub) const
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[0] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    int endswith(const basic_string& _Sub) const
        {
        return this->endswith(_Sub.c_str());
        }

    int endswith(const_pointer _Sub) const
        {
        const size_type _Sub_size = this->_Get_pointer_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=this->_Mysize()-_Sub_size; i<this->_Mysize(); i++)
            {
            if (this->_Myptr()[i] != _Sub[i-this->_Mysize()+_Sub_size])
                {
                return 0;
                }
            }

        return 1;
        }

    int endswith(const_reference _Sub) const
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[this->_Mysize()-1] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    basic_string substring(size_type _Start) const
        {
        return this->substring(_Start, this->_Mysize()-1);
        }

    basic_string substring(size_type _Start, size_type _End) const
        {
        pointer const _Substring = this->_Al.allocate(_End-_Start+1);

        if (this->_Mysize() <= _Start)
            {
            return _Substring; // "null"
            }

        for (size_type i=_Start; i<=_End; i++) // inclusive (i<_End for exclusive)
            {
            _Substring[i-_Start] = this->_Myptr()[i];
            }

        _Substring[_End] = '\00';
        return basic_string(_Substring);
        }

    int contains(const basic_string& _Sub) const
        {
        return this->contains(_Sub.c_str());
        }

    int contains(const_pointer _Sub) const
        {
        const size_type _Sub_size = this->_Get_pointer_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->substring(i).startswith(_Sub))
                {
                return 1;
                }
            }

        return 0;
        }

    int contains(const_reference _Sub)
        {
        if (this->_Mysize() == 0)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->_Myptr()[i] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    basic_string * split(const basic_string& _Delim, size_type * _Count)
        {
        return this->split(_Delim.c_str(), _Count);
        }

    basic_string * split(const_pointer _Delim, size_type * _Count)
        {
        vector<basic_string> _Segments = this->split(_Delim);
        *_Count = _Segments.size();
        return _Segments.to_array();
        }

    basic_string * split(const_reference _Delim, size_type * _Count)
        {
        pointer const _S_delim = this->_Al.allocate(2);
        _S_delim[0] = _Delim;
        _S_delim[1] = '\00';
        const_pointer _Const_delim = _S_delim;

        return this->split(_Const_delim, _Count);
        }

    vector<basic_string> split(const basic_string& _Delim)
        {
        return this->split(_Delim.c_str());
        }

    vector<basic_string> split(const_pointer _Delim)
        {
        const size_type _Delim_size = this->_Get_pointer_size(_Delim);
        vector<basic_string> _Segments;
        basic_string _Current;

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->substring(i).startswith(_Delim))
                {
                i += _Delim_size - 1;
                _Segments.push_back(_Current._Create_copy());
                _Current = "";
                continue;
                }

            _Current += this->_Myptr()[i];
            }

        _Segments.push_back(_Current);
        return _Segments;
        }

    vector<basic_string> split(const_reference _Delim)
        {
        pointer const _S_delim = this->_Al.allocate(2);
        _S_delim[0] = _Delim;
        _S_delim[1] = '\00';
        const_pointer _Const_delim = _S_delim;

        return this->split(_Const_delim);
        }

    static basic_string join(const_pointer _Delim, basic_string * _Elems, size_type _Count)
        {
        return basic_string(_Delim).join(_Elems, _Count);
        }

    static basic_string join(const_pointer _Delim, pointer * _Elems, size_type _Count)
        {
        return basic_string(_Delim).join(_Elems, _Count);
        }

    static basic_string join(const_pointer _Delim, vector<basic_string> _Elems)
        {
        return basic_string(_Delim).join(_Elems);
        }

    pointer join(basic_string * _Elems, size_type _Count)
        {
        pointer * _Ptr_elems = new pointer[_Count];

        for (size_type i=0; i<_Count; i++)
            {
            _Ptr_elems[i] = this->_Get_pointer_copy(_Elems[i].c_str());
            }

        return this->join(_Ptr_elems, _Count);
        }

    pointer join(vector<basic_string> _Elems)
        {
        const size_type _Count = _Elems.size();
        pointer * _Ptr_elems = new pointer[_Count];

        for (size_type i=0; i<_Count; i++)
            {
            _Ptr_elems[i] = this->_Get_pointer_copy(_Elems.index(i).c_str());
            }

        return this->join(_Ptr_elems, _Count);
        }

    pointer join(pointer * _Elems, size_type _Count)
        {
        basic_string _Total;

        if (_Count > 0)
            {
            _Total += _Elems[0];
            }

        for (size_type i=1; i<_Count; i++)
            {
            _Total += (basic_string)this->_Myptr();
            _Total += _Elems[i];
            }

        return this->_Get_pointer_copy(_Total.c_str());
        }

    basic_string lower() const
        {
        return basic_string::lower(this->_Myptr());
        }

    static basic_string lower(const basic_string& _Str)
        {
        basic_string _Lower;

        for (size_type i=0; i<_Str.size(); i++)
            {
            _Lower += basic_string::lower(_Str.data()[i]);
            }

        return _Lower;
        }

    // return const_pointer?
    static basic_string lower(const_pointer _Str)
        {
        basic_string _Lower;

        for (size_type i=0; i<this->_Get_pointer_size(_Str); i++)
            {
            _Lower += basic_string::lower(_Str[i]);
            }

        return _Lower;
        }

    static const_reference lower(const_reference _Char)
        {
        if (_Char >= 65 && _Char <= 90)
            {
            return _Char + 32;
            }

        return _Char;
        }

    basic_string upper() const
        {
        return basic_string::upper(this->_Myptr());
        }

    static basic_string upper(const basic_string& _Str)
        {
        basic_string _Upper;

        for (size_type i=0; i<_Str.size(); i++)
            {
            _Upper += basic_string::upper(_Str.data()[i]);
            }

        return _Upper;
        }

    // return const_pointer?
    static basic_string upper(const_pointer _Str)
        {
        basic_string _Upper;

        for (size_type i=0; i<this->_Get_pointer_size(_Str); i++)
            {
            _Upper += basic_string::upper(_Str[i]);
            }

        return _Upper;
        }

    static const_reference upper(const_reference _Char)
        {
        if (_Char >= 97 && _Char <= 122)
            {
            return _Char - 32;
            }

        return _Char;
        }

    void data() const
        {
        return this->_Myptr();
        }

    };

using string = basic_string<char, allocator<char>>;

#endif

#pragma once
#ifndef _NSSTRING_
#define _NSSTRING_

#include <stdio.h>

#include <cstring>

#include "nsvector"

// Contained char* with sugar
    class string {
private:
    char *strValue_;

public:
    string() {
    }

    string(const char *str) {
        this->strValue_ = (char*)str;
    }

    explicit string(char *str) {
        this->strValue_ = str;
    }

    explicit string(char s) {
        this->strValue_ = (char*)"a";
        this->strValue_[0] = s;
    }

    int length() const {
        return strlen(this->strValue_);
    }

    const char * c_str() const {
        char * new_s = new char[this->length()];

        for (int i=0; i<this->length(); i++)
            {
            new_s[i] = this->strValue_[i];
            }

        new_s[this->length()] = '\0';

        return (const char *)new_s;
    }

    void operator=(string n) {
        free(this->strValue_);
        this->strValue_ = (char *)malloc(n.length());

        for (int i=0; i<n.length(); i++) {
            this->strValue_[i] = n.c_str()[i];
        }
    }

    static bool isUpperCaseChar(char c) {
        if (c > 64 && c < 91)
            {
            return true;
            }

        return false;
    }

    static char lowerChar(char c) {
        return c+32;
    }

    string lower() {
        vector<char> letters;

        for (int i=0; i<(int)strlen(this->strValue_); i++)
            {
            if (string::isUpperCaseChar(this->strValue_[i]))
                {
                letters.append(string::lowerChar(this->strValue_[i]));
                }
            else
                {
                letters.append(this->strValue_[i]);
                }
            }

        letters.append('\00');
        char * letterStr = letters.toArray();

        return (string)letterStr;
    }

    char operator[](int i) {
        return this->strValue_[i];
    }

    bool operator==(string n) {
        if (strcmp(this->c_str(), n.c_str()) == 0)
            {
            return true;
            }

        return false;
    }

    bool operator==(const char *n) {
        string ns = (string)n;

        if (strcmp(this->c_str(), ns.c_str()) == 0)
            {
            return true;
            }

        return false;
    }

    bool operator==(char n) {
        string ns = (string)n;

        if (strcmp(this->c_str(), ns.c_str()) == 0)
            {
            return true;
            }

        return false;
    }

    bool operator!=(string n) {
        if (strcmp(this->c_str(), n.c_str()) != 0)
            {
            return true;
            }

        return false;
    }

    bool operator!=(const char *n) {
        if (strcmp(this->c_str(), n) != 0)
            {
            return true;
            }

        return false;
    }

    bool operator!=(char n) {
        string ns = (string)n;

        if (strcmp(this->c_str(), ns.c_str()) != 0)
            {
            return true;
            }

        return false;
    }

    string operator+(string n) {
        string ret = (string)this->strValue_;
        ret += n;
        return ret;
    }

    string operator+(const char *n) {
        string ret = (string)this->strValue_;
        ret += n;
        return ret;
    }

    string operator+(char n) {
        string ret = (string)this->strValue_;
        ret += n;
        return ret;
    }

    void operator+=(string n) {
        string tmp = this->strValue_;
        tmp += n.c_str();
        char * tmp_nc = new char[tmp.length()];

        for (int i=0; i<tmp.length(); i++)
            {
            tmp_nc[i] = tmp[i];
            }

        tmp_nc[tmp.length()] = '\0';

        this->strValue_ = (char *)tmp_nc;
    }

    void operator+=(const char *n) {
        vector<char> q;

        for (int i=0; i<(int)strlen(this->strValue_); i++)
            {
            q.append(this->strValue_[i]);
            }

        for (int i=0; i<(int)strlen(n); i++)
            {
            q.append(n[i]);
            }

        q.append('\00');
        this->strValue_ = q.toArray();
    }

    void operator+=(char n) {
        vector<char> q;

        for (int i=0; i<(int)strlen(this->strValue_); i++)
            {
            q.append(this->strValue_[i]);
            }

        q.append(n);
        q.append('\00');

        this->strValue_ = (char*)string(q.toArray()).c_str();
    }

    bool operator>(const string &b) const {
        if (strlen(this->c_str()) > strlen(b.c_str()))
            {
            return true;
            }

        return false;
    }

    bool operator<(const string &b) const {
        if (strlen(this->c_str()) < strlen(b.c_str()))
            {
            return true;
            }

        return false;
    }

    vector<string> split(string delim) {
        vector<string> ret;
        printf("Incomplete function split with delim: %s\n", delim.c_str());
        return ret;
    }

    vector<string> split(const char *delim) {
        vector<string> ret;
        printf("Incomplete function split with delim: %s\n", delim);
        return ret;
    }

    vector<string> split(char delim) {
        vector<string> ret;
        string cur = "";

        for (int i=0; i<(int)strlen(this->strValue_); i++)
            {
            if (this->strValue_[i] == delim)
                {
                ret.append(string(cur.c_str()));
                cur = "";
                }
            else
                {
                cur += this->strValue_[i];
                }
            }

        ret.append(cur);
        return ret;
    }

    bool startswith(string n) {
        return this->startswith(n.c_str());
    }

    bool startswith(const char *n) {
        bool start = false;

        for (int i=0; i<(int)strlen(n); i++)
            {
            start = true;

            if (i >= (int)(strlen(this->c_str())-1))
                {
                start = false;
                break;
                }

            if (n[i] != this->c_str()[i])
                {
                start = false;
                break;
                }
            }

        return start;
    }

    bool startswith(char n) {
        if (this->strValue_[0] == n)
            {
            return true;
            }
        else
            {
            return false;
            }
    }

    // bool endswith(string n) {
    //     printf("Incomplete function endswith with n: %s\n", n.c_str());
    //     return false;
    // }

    // bool endswith(const char *n) {
    //     printf("Incomplete function endswith with n: %s\n", n);
    //     return false;
    // }

    bool endswith(char n) {
        if (this->strValue_[strlen(this->strValue_)-1] == n)
            {
            return true;
            }

        return false;
    }

    size_t size() const {
        return strlen(this->c_str());
    }

    bool contains(string n) {
        return this->contains(n.c_str());
    }

    bool contains(const char *n) {
        bool cont = false;

        for (int i=0; i<(int)this->size(); i++)
            {
            if (this->c_str()[i] == n[0])
                {
                for (int j=0; j<(int)strlen(n); j++)
                    {
                    cont = true;

                    if (j >= ((int)this->size()-1))
                        {
                        return false;
                        }

                    if (this->c_str()[i+j] != n[j])
                        {
                        cont = false;
                        }
                    }
                }
            }
        
        return cont;
    }

    bool contains(char n) {
        for (int i=0; i<(int)this->size(); i++)
            {
            if (this->c_str()[i] == n)
                {
                return true;
                }
            }

        return false;
    }
};

#endif

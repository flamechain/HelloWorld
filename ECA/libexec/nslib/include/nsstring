// NSLib string header
#pragma once
#ifndef _NSSTRING_
#define _NSSTRING_

// prevents nsstring from using vector class for some basic_string method
// sometimes prefered to keep each section comepletely independant
// defined outside before importing any nslib components:
// #define NS_INDEPENDENT

#ifndef NS_INDEPENDENT
#include <nsvector>
#endif

#include <xnsmem0>
#include <xnsdef>

using _NSTD allocator;

        // CLASS TEMPLATE _String_alloc
template<class _Elem,
    class _Alloc = allocator<_Elem>>
    class _String_alloc
    { // base class for basic_string to hold allocator
public:
    using _Alty = _Alloc;

	using value_type = _Elem;
	using size_type = _NSTD size_t;
	using pointer = _Elem *;
	using const_pointer = const _Elem * const;

private:
    _Alty _AL;

public:

    _String_alloc() noexcept
        {
        this->_AL = _Alloc();
        }

    _String_alloc(const _Alty& _Al) noexcept
        {
        this->_Moveal(_Al);
        }

    ~_String_alloc()
        {
        }

    void _Moveal(const _Alty& _Al)
        {
        this->_AL = _Al;
        }

    _Alty _Getal() const
        {
        return this->_AL;
        }

    };

        // CLASS TEMPLATE _Char_traits
template<class _Elem>
    class _Char_traits
    { // propterties of a string char element
private:
    using value_type = _Elem;
    using size_type = _NSTD size_t;
    using pointer = _Elem *;
    using const_pointer = const _Elem * const;
    using reference = _Elem&;
    using const_reference = const _Elem&;

    _Char_traits() noexcept
        {
        }

public:

    static size_type _Get_ptr_size(const_pointer _Ptr)
        {
        size_type _Ptr_size;

        for (_Ptr_size=0; _Ptr[_Ptr_size]!='\00'; _Ptr_size++)
            {
            }

        return _Ptr_size;
        }

    static size_type _Get_ptr_size(pointer _Ptr)
        {
        size_type _Ptr_size;

        for (_Ptr_size=0; _Ptr[_Ptr_size]!='\00'; _Ptr_size++)
            {
            }

        return _Ptr_size;
        }

    static int _Compare_ptrs(pointer _Left, pointer _Right)
        {
        const size_type _Left_size = _Char_traits::_Get_ptr_size(_Left);
        const size_type _Right_size = _Char_traits::_Get_ptr_size(_Right);
        return _Char_traits::_Compare_ptrs(_Left, _Right, _Left_size, _Right_size);
        }

    static int _Compare_ptrs(pointer _Left, pointer _Right, size_type _Left_size, size_type _Right_size)
        {
        if (_Left_size != _Right_size)
            {
            return 0;
            }

        for (size_type i=0; i<_Left_size; i++)
            {
            if (_Left[i] != _Right[i])
                {
                return 0;
                }
            }

        return 1;
        }

    };

        // CLASS TEMPLATE basic_string
template<class _Elem,
    class _Traits = _Char_traits<_Elem>,
    class _Alloc = allocator<_Elem>>
    class basic_string
        : public _String_alloc<_Elem, _Alloc>
    { // null-terminated transparent array of elements
private:
    using _Mybase = _String_alloc<_Elem, _Alloc>;
    using _Alty = typename _Mybase::_Alty;

    using value_type = typename _Mybase::value_type;
    using size_type = typename _Mybase::size_type;
    using pointer = typename _Mybase::pointer;
    using const_pointer = typename _Mybase::const_pointer;

    using reference = value_type&;
    using const_reference = const value_type&;

public:
    value_type _Null_value = '\00';
    const_pointer _Null_pointer = "\00";

private:
    pointer _MY_PTR;
    size_type _MY_SIZE;
    size_type _MY_RES = 0;

public:

    basic_string() noexcept
        : _Mybase()
        {
        this->_Tidy_init();
        }

    basic_string(const basic_string& _Right) noexcept
        : _Mybase()
        {
        this->_Construct_contents(_Right);
        }

    basic_string(const basic_string& _Right, const _Alloc& _Al) noexcept
        : _Mybase(_Al)
        {
        this->_Construct_contents(_Right);
        }

    basic_string(const_pointer _Right) noexcept
        : _Mybase()
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);
        const size_type _Right_res = _Right_size;
        this->_Construct_contents(_Right, _Right_size, _Right_res);
        }

    basic_string(const_pointer _Right, const _Alloc& _Al) noexcept
        : _Mybase(_Al)
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);
        const size_type _Right_res = _Right_size;
        this->_Construct_contents(_Right, _Right_size, _Right_res);
        }

    basic_string(const_pointer _Right, const size_type _Size) noexcept
        : _Mybase()
        {
        this->_Construct_contents(_Right, _Size, _Size);
        }

    basic_string(const_pointer _Right, const size_type _Size, const _Alloc& _Al) noexcept
        : _Mybase(_Al)
        {
        this->_Construct_contents(_Right, _Size, _Size);
        }

    explicit basic_string(pointer _Right) noexcept
        : _Mybase()
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);
        this->_Explicit_construct(_Right, _Right_size);
        }

    explicit basic_string(pointer _Right, const size_type _Size) noexcept
        : _Mybase()
        {
        this->_Explicit_construct(_Right, _Size);
        }

    explicit basic_string(const_reference _Right) noexcept
        : _Mybase()
        {
        this->_Tidy_init();
        this->_Myptr()[0] = _Right;
        this->_MY_SIZE = 1;
        }

    explicit basic_string(const _Alty& _Al) noexcept
        : _Mybase(_Al)
        {
        }

    ~basic_string()
        {
        this->_Tidy_deallocate();
        }

    void operator=(const basic_string& _Right) noexcept
        {
        this->assign(_Right);
        }

    void operator=(const_pointer _Right) noexcept
        {
        this->assign(_Right);
        }

    void operator=(const_reference _Right) noexcept
        {
        this->assign(_Right);
        }

// "private" (only used by basic_string even if another instance)

    void _Tidy_init()
        {
        this->_MY_PTR = this->_Getal().allocate(10); // buffer
        this->_MY_SIZE = 0;
        this->_MY_RES = 10;
        }

    void _Tidy_deallocate()
        {
        if (this->_Myres() > 0)
            {
            this->_Getal().deallocate(this->_Myptr(), this->_Myres());
            this->_MY_SIZE = 0;
            this->_MY_RES = 0;
            }
        }

    void _Explicit_construct(pointer _Right, const size_type _Right_size)
        {
        pointer const _New_ptr = this->_Getal().allocate(_Right_size);

        for (size_type i=0; i<_Right_size; i++)
            {
            _New_ptr[i] = _Right[i];
            }

        const_pointer _Right_ptr = _New_ptr;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_size);
        }

    void _Construct_contents(const basic_string& _Right)
        {
        const size_type _Right_size = _Right._Mysize();
        const_pointer _Right_ptr = _Right._Myptr();
        const size_type _Right_res = _Right._Myres();

        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    void _Construct_contents(const_pointer _Right_ptr, const size_type _Right_size, const size_type _Right_res/*unused*/)
        {
        this->_Tidy_init();

        if (_Right_size <= this->_Myres())
            {
            _NSTD copyinto(this->_Myptr(), _Right_ptr, _Right_size);
            this->_MY_SIZE = _Right_size;
            return;
            }

        printf("rightsz: %i\n", (int)_Right_size);
        const size_type _New_capacity = _Right_size;
        pointer const _New_array = this->_Getal().allocate(_New_capacity);
        _NSTD copyinto(_New_array, _Right_ptr, _Right_size);

        this->_Getal().deallocate(this->_Myptr(), this->_Myres());
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        printf("myres: %i\n", (int)this->_Myres());
        }

    pointer _Concat_ptrs(const pointer _Left_ptr, const const_pointer _Right_ptr, size_type _Left_size, size_type _Right_size) const
        {
        const size_type _New_capacity = _Left_size + _Right_size;
        pointer const _Combined = this->_Getal().allocate(_New_capacity);

        for (size_type i=0; i<_Left_size; i++)
            {
            _Combined[i] = _Left_ptr[i];
            }

        for (size_type i=0; i<_Right_size; i++)
            {
            _Combined[_Left_size+i] = _Right_ptr[i];
            }

        _Combined[_New_capacity] = '\00';
        return _Combined;
        }

    pointer _Safe(const_pointer _Ptr, size_type _Ptr_size) const
        {
        pointer const _Copy = this->_Getal().allocate(_Ptr_size+1);

        for (size_type i=0; i<_Ptr_size; i++)
            {
            _Copy[i] = _Ptr[i];
            }

        _Copy[_Ptr_size] = '\00';
        return _Copy;
        }

    pointer _Safe(const_pointer _Ptr) const
        {
        const size_type _Ptr_size = _Traits::_Get_ptr_size(_Ptr);
        return this->_Safe(_Ptr, _Ptr_size);
        }

    pointer _Noterminator(pointer _Ptr) const
        {
        const size_type _Ptr_size = _Traits::_Get_ptr_size(_Ptr);
        pointer _New_ptr = this->_Getal().allocate(_Ptr_size);
        _NSTD copyinto(_New_ptr, _Ptr, _Ptr_size);

        return _New_ptr;
        }

// access methods

    pointer _Myptr() const
        {
        return this->_MY_PTR;
        }

    size_type _Mysize() const
        {
        return this->_MY_SIZE;
        }

    size_type _Myres() const
        {
        return this->_MY_RES;
        }

// operators

    int operator==(const basic_string& _Right) const
        {
        return this->compare(_Right);
        }

    int operator==(const_pointer _Right) const
        {
        return this->compare(_Right);
        }

    int operator==(const_reference _Right) const
        {
        return this->compare(_Right);
        }

    int operator!=(const basic_string& _Right) const
        {
        if (this->compare(_Right) == 1)
            {
            return 0;
            }

        return 1;
        }

    int operator!=(const_pointer _Right) const
        {
        if (this->compare(_Right) == 1)
            {
            return 0;
            }

        return 1;
        }

    int operator!=(const_reference _Right) const
        {
        if (this->compare(_Right) == 1)
            {
            return 0;
            }

        return 1;
        }

    void operator+=(const basic_string& _Right)
        {
        this->append(_Right);
        }

    void operator+=(const_pointer _Right)
        {
        this->append(_Right);
        }

    void operator+=(const_reference _Right)
        {
        this->append(_Right);
        }

    basic_string operator+(const basic_string& _Right) const
        {
        const size_type _Right_size = _Right._Mysize();
        basic_string _Copy = _Concat_ptrs(this->_Myptr(), _Right._Myptr(), this->_Mysize(), _Right_size);
        return _Copy;
        }

    basic_string operator+(const_pointer _Right) const
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);
        basic_string _Copy = _Concat_ptrs(this->_Myptr(), _Right, this->_Mysize(), _Right_size); // operator+= is hefty so this is faster
        return _Copy;
        }

    basic_string operator+(const_reference _Right) const
        {
        basic_string _Copy = this->c_str();
        _Copy += _Right; // slower than converting to pointer and concating, but more readable
        return _Copy;
        }

    value_type operator[](long long _Index) const
        {
        return this->index(_Index);
        }

    // just for std::map (temp before make custom map)
    bool operator<(const basic_string& _Right) const
        {
        if (this->size() < _Right.size())
            {
            return true;
            }

        return false;
        }

    bool operator>(const basic_string& _Right) const
        {
        if (this->size() > _Right.size())
            {
            return true;
            }

        return false;
        }

// public methods

    void assign(const basic_string& _Right)
        {
        if (this != _NSTD addressof(_Right))
            {
            this->_Tidy_deallocate();
            this->_Moveal(_Right._Getal());
            this->_Construct_contents(_Right);
            }
        }

    void assign(const_pointer _Right)
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);

        if (!_Traits::_Compare_ptrs(this->_Myptr(), _Safe(_Right), this->_Mysize(), _Right_size))
            {
            this->_Tidy_deallocate();
            this->_Construct_contents(_Right, _Right_size, _Right_size);
            }
        }

    void assign(const_reference _Right)
        {
        if (this->_Myres() > 0)
            { // faster to assign 1 char than make pointer and pass into _Construct_contents
            this->_Myptr()[0] = _Right;
            this->_MY_SIZE = 1;
            return;
            }

        pointer const _Right_new = this->_Getal().allocate(1);
        _Right_new[0] = _Right;

        const size_type _Right_size = 1;
        const size_type _Right_res = 1;
        const_pointer _Right_ptr = _Right_new;
        this->_Construct_contents(_Right_ptr, _Right_size, _Right_res);
        }

    void append(const basic_string& _Right)
        {
        const size_type _Right_size = _Right._Mysize();
        const_pointer _Right_ptr = _Right._Myptr();

        if (this->_Myres() > this->_Mysize() + _Right_size)
            {
            _NSTD copyinto(this->_Myptr(), _Right_ptr, _Right_size, this->_Mysize());
            this->_MY_SIZE += _Right_size;
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        pointer const _New_array = _Concat_ptrs(this->_Myptr(), _Right_ptr, this->_Mysize(), _Right_size);

        this->_Getal().deallocate(this->_Myptr(), this->_Myres());

        this->_MY_PTR = _Noterminator(_New_array);
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void append(const_pointer _Right)
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);

        if (this->_Myres() > this->_Mysize() + _Right_size)
            {
            for (size_type i=0; i<_Right_size; i++)
                {
                this->_Myptr()[this->_Mysize()+i] = _Right[i];
                }

            this->_MY_SIZE += _Right_size;
            return;
            }

        const size_type _New_capacity = this->_Mysize()+_Right_size;
        pointer const _New_array = _Concat_ptrs(this->_Myptr(), _Right, this->_Mysize(), _Right_size);

        this->_Getal().deallocate(this->_Myptr(), this->_Myres());
        this->_MY_PTR = _Noterminator(_New_array);
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    void append(const_reference _Right)
        {
        if (this->_Myres() > this->_Mysize() + 1)
            {
            this->_Myptr()[this->_Mysize()] = _Right;
            this->_MY_SIZE++;
            return;
            }

        const size_type _New_capacity = this->_Mysize()+1;
        pointer const _New_array = this->_Getal().allocate(_New_capacity);
        _NSTD copyinto(_New_array, this->_Myptr(), this->_Mysize());

        _New_array[this->_Mysize()] = _Right;
        this->_Getal().deallocate(this->_Myptr(), this->_Myres());
        this->_MY_PTR = _New_array;
        this->_MY_SIZE = _New_capacity;
        this->_MY_RES = _New_capacity;
        }

    const_pointer c_str() const
        {
        pointer const _New_ptr = this->_Getal().allocate(this->_Mysize()+1);

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            _New_ptr[i] = this->_Myptr()[i];
            }

        _New_ptr[this->_Mysize()] = '\00';

        const_pointer _New_const_ptr = _New_ptr;
        return _New_const_ptr;
        }

    value_type index(long long _Index) const
        {
        const size_type _Pos = _NSTD posindex(_Index, this->_Mysize());
        return this->_Myptr()[_Pos];
        }

    size_type length() const
        {
        return this->size();
        }

    size_type size() const
        {
        return this->_Mysize() * sizeof(value_type);
        }

    int startswith(const basic_string& _Sub) const
        {
        return this->startswith(_Sub.c_str());
        }

    int startswith(const_pointer _Sub) const
        {
        const size_type _Sub_size = _Traits::_Get_ptr_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (i < _Sub_size)
                {
                if (this->_Myptr()[i] != _Sub[i])
                    {
                    return 0;
                    }
                }
            }

        return 1;
        }

    int startswith(const_reference _Sub) const
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[0] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    int endswith(const basic_string& _Sub) const
        {
        return this->endswith(_Sub.c_str());
        }

    int endswith(const_pointer _Sub) const
        {
        const size_type _Sub_size = _Traits::_Get_ptr_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=this->_Mysize()-_Sub_size; i<this->_Mysize(); i++)
            {
            if (this->_Myptr()[i] != _Sub[i-this->_Mysize()+_Sub_size])
                {
                return 0;
                }
            }

        return 1;
        }

    int endswith(const_reference _Sub) const
        {
        if (this->_Mysize() > 0)
            {
            if (this->_Myptr()[this->_Mysize()-1] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    basic_string substring(long long _Start) const
        {
        return this->substring(_Start, this->_Mysize()-1);
        }

    basic_string substring(long long _Start, long long _End) const
        {
        const size_type _Start_pos = _NSTD posindex(_Start, this->_Mysize());
        const size_type _End_pos = _NSTD posindex(_End, this->_Mysize());

        if (this->_Mysize() <= _Start_pos)
            {
            return (basic_string)'\00';
            }

        const size_type _Sub_capacity = _End_pos-_Start_pos+1;
        pointer _Substring = this->_Getal().allocate(_Sub_capacity);

        for (size_type i=_Start_pos; i<=_End_pos; i++)
            {
            _Substring[i-_Start_pos] = this->index(i);
            }

        return basic_string(_Substring, _Sub_capacity);
        }

    int contains(const basic_string& _Sub) const
        {
        return this->contains(_Sub.c_str());
        }

    int contains(const_pointer _Sub) const
        {
        const size_type _Sub_size = _Traits::_Get_ptr_size(_Sub);

        if (this->_Mysize() < _Sub_size)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->substring(i).startswith(_Sub))
                {
                return 1;
                }
            }

        return 0;
        }

    int contains(const_reference _Sub) const
        {
        if (this->_Mysize() == 0)
            {
            return 0;
            }

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->_Myptr()[i] == _Sub)
                {
                return 1;
                }
            }

        return 0;
        }

    basic_string * split(const basic_string& _Delim, size_type * _Count) const
        {
        return this->split(_Delim.c_str(), _Count);
        }

    basic_string * split(const_pointer _Delim, size_type * _Count) const
        {
        auto _Al = allocator<basic_string>();
        size_type _Vec_size = 10;
        basic_string * _Vec = _Al.allocate(_Vec_size);
        const size_type _Delim_size = _Traits::_Get_ptr_size(_Delim);

        basic_string _Current;

        auto increaseAlloc = [](size_type _Size, basic_string * _V, size_type * _V_size, allocator<basic_string> _A)
            {
            basic_string * _New_vec = _A.allocate(*_V_size + _Size);
            _NSTD copyinto(_New_vec, _V, *_V_size);
            _A.deallocate(_V, *_V_size);
            _V = _New_vec;
            *_V_size += _Size;
            };

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->substring(i).startswith(_Delim))
                {
                i += _Delim_size - 1;

                if (_Vec_size <= *_Count)
                    {
                    increaseAlloc(10, _Vec, &_Vec_size, _Al);
                    }

                _Vec[*_Count++] = _Current;
                _Current = "";
                continue;
                }

            _Current += this->_Myptr()[i];
            }

        if (_Vec_size <= *_Count)
            {
            increaseAlloc(10, _Vec, &_Vec_size, _Al);
            }

        _Vec[*_Count++] = _Current;
        return _Vec;
        }

    basic_string * split(const_reference _Delim, size_type * _Count) const
        {
        return this->split(basic_string(_Delim), _Count);
        }

#ifndef NS_INDEPENDENT
    vector<basic_string> split(const basic_string& _Delim) const
        {
        return this->split(_Delim.c_str());
        }

    vector<basic_string> split(const_pointer _Delim) const
        {
            printf("starting split\n");
        const size_type _Delim_size = _Traits::_Get_ptr_size(_Delim);
        vector<basic_string> _Segments;
        basic_string _Current;

        for (size_type i=0; i<this->_Mysize(); i++)
            {
            if (this->substring(i).startswith(_Delim))
                {
                i += _Delim_size - 1;
                _Segments.append(basic_string(_Current));
                _Current = "";
                continue;
                }

            _Current += this->_Myptr()[i];
            }

        _Segments.append(_Current);
        return _Segments;
        }

    vector<basic_string> split(const_reference _Delim) const
        {
        return this->split(basic_string(_Delim));
        }

    static basic_string join(const_pointer _Delim, vector<basic_string> _Elems)
        {
        return basic_string(_Delim).join(_Elems);
        }

    static basic_string join(const_reference _Delim, vector<basic_string> _Elems)
        {
        return basic_string(_Delim).join(_Elems);
        }

    basic_string join(vector<basic_string> _Elems) const
        {
        basic_string _Joined;

        if (_Elems.count() > 0)
            {
            _Joined = _Elems[0];
            }

        for (size_type i=0; i<_Elems.count(); i++)
            {
            _Joined += this->c_str();
            basic_string __Elem = _Elems[i]; // _Elem name taken by template
            _Joined += __Elem;
            }

        return _Joined;
        }
#endif

    static basic_string join(const_pointer _Delim, basic_string * _Elems, size_type _Count)
        {
        return basic_string(_Delim).join(_Elems, _Count);
        }

    static basic_string join(const_pointer _Delim, pointer * _Elems, size_type _Count)
        {
        return basic_string(_Delim).join(_Elems, _Count);
        }

    pointer join(basic_string * _Elems, size_type _Count) const
        {
        auto _Al = allocator<pointer>();
        pointer * _Ptr_elems = _Al.allocate(_Count);

        for (size_type i=0; i<_Count; i++)
            {
            _Ptr_elems[i] = _Safe(_Elems[i].c_str());
            }

        return this->join(_Ptr_elems, _Count);
        }

    pointer join(pointer * _Elems, size_type _Count) const
        {
        basic_string _Me = this->c_str();
        basic_string _Total;

        if (_Count > 0)
            {
            _Total += _Elems[0];
            }

        for (size_type i=1; i<_Count; i++)
            {
            _Total += _Me;
            _Total += _Elems[i];
            }

        return _Safe(_Total.c_str());
        }

    basic_string lower() const
        {
        return basic_string::lower(this->_Myptr());
        }

    static basic_string lower(const basic_string& _Str)
        {
        basic_string _Lower;

        for (size_type i=0; i<_Str.size(); i++)
            {
            _Lower += basic_string::lower(_Str.data()[i]);
            }

        return _Lower;
        }

    static basic_string lower(const_pointer _Str)
        {
        basic_string _Lower;

        for (size_type i=0; i<_Char_traits<_Elem>::_Get_ptr_size(_Str); i++)
            {
            _Lower += basic_string::lower(_Str[i]);
            }

        return _Lower;
        }

    static value_type lower(const_reference _Char)
        {
        if (_Char >= 65 && _Char <= 90)
            {
            return _Char + 32;
            }

        return _Char;
        }

    basic_string upper() const
        {
        return basic_string::upper(this->_Myptr());
        }

    static basic_string upper(const basic_string& _Str)
        {
        basic_string _Upper;

        for (size_type i=0; i<_Str.size(); i++)
            {
            _Upper += basic_string::upper(_Str.data()[i]);
            }

        return _Upper;
        }

    static basic_string upper(const_pointer _Str)
        {
        basic_string _Upper;

        for (size_type i=0; i<_Char_traits<_Elem>::_Get_ptr_size(_Str); i++)
            {
            _Upper += basic_string::upper(_Str[i]);
            }

        return _Upper;
        }

    static value_type upper(const_reference _Char)
        {
        if (_Char >= 97 && _Char <= 122)
            {
            return _Char - 32;
            }

        return _Char;
        }

    pointer data() const
        {
        return this->_Myptr();
        }

    int compare(const basic_string& _Right) const
        {
        if (_Traits::_Compare_ptrs(this->_Myptr(), _Right._Myptr(), this->_Mysize(), _Right._Mysize()))
            {
            return 1;
            }

        return 0;
        }

    int compare(const_pointer _Right) const
        {
        const size_type _Right_size = _Traits::_Get_ptr_size(_Right);

        if (_Traits::_Compare_ptrs(this->_Myptr(), _Safe(_Right), this->_Mysize(), _Right_size))
            {
            return 1;
            }

        return 0;
        }

    int compare(const_reference _Right) const
        {
        if (this->_Mysize() == 1) // nested prevents error if _MY_SIZE = 0
            {
            if (this->_Myptr()[0] == _Right)
                {
                return 1;
                }
            }

        return 0;
        }

    basic_string strip() const
        {
        basic_string _Stripped = this->strip(' ');
        _Stripped = _Stripped.strip('\t');
        _Stripped = _Stripped.strip('\n');

        return _Stripped;
        }

    basic_string strip(const basic_string& _Substring) const
        {
        return basic_string::strip(basic_string(this->c_str()), _Substring);
        }

    basic_string strip(const_pointer _Substring) const
        {
        return basic_string::strip(basic_string(this->c_str()), _Substring);
        }

    basic_string strip(const_reference _Char) const
        {
        return basic_string::strip(basic_string(this->c_str()), _Char);
        }

    static basic_string strip(const basic_string& _String, const basic_string& _Substring)
        {
        if (!_String.contains(_Substring))
            {
            return _String;
            }

        basic_string _Stripped;

        for (size_type i=0; i<_String.size(); i++)
            {
            if (!_String.substring(i).startswith(_Substring))
                {
                _Stripped += _String[i];
                }
            else
                {
                i += _Substring.size() - 1; // because i++ after this
                }
            }

        return _Stripped;
        }

    static basic_string strip(const basic_string& _String, const_pointer _Substring)
        {
        if (!_String.contains(_Substring))
            {
            return _String;
            }

        basic_string _Stripped;
        const size_type _Substring_size = _Traits::_Get_ptr_size(_Substring);

        for (size_type i=0; i<_String.size(); i++)
            {
            if (!_String.substring(i).startswith(_Substring))
                {
                _Stripped += _String[i];
                }
            else
                {
                i += _Substring_size - 1;
                }
            }

        return _Stripped;
        }

    static basic_string strip(const basic_string& _String, const_reference _Char)
        {
        if (!_String.contains(_Char))
            {
            return _String;
            }

        basic_string _Stripped;

        for (size_type i=0; i<_String.size(); i++)
            {
            if (_String[i] != _Char)
                {
                _Stripped += _String[i];
                }
            }

        return _Stripped;
        }

    };

using string = basic_string<char, _Char_traits<char>, allocator<char>>;

#endif // _NSSTRING_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V2.1:0007 */

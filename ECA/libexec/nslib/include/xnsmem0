// NSLib memory internal header
#pragma once
#ifndef _XNSMEM0_
#define _XNSMEM0_

#include <xnsdef>

_NSTD_BEGIN

// temp before implented heap
void * nsmalloc(const size_t _Size)
    {
    return ::operator new(_Size);
    }

void nsfree(void * _Ptr, const size_t _Size)
    {
    ::operator delete(_Ptr, _Size);
    }

        // CLASS TEMPLATE _Custom_allocator_traits
template<class _Ty>
    class _Custom_allocator_traits
    { // allocator traits using nslib heap
private:

    _Custom_allocator_traits()
        {
        }

public:

    static void * _Allocate(const size_t _Size)
        {
        return nsmalloc(_Size * sizeof(_Ty));
        }

    static void _Deallocate(void * _Ptr, const size_t _Size)
        {
        nsfree(_Ptr, _Size * sizeof(_Ty));
        }

    };

        // CLASS TEMPLATE _Default_allocator_traits
template<class _Ty>
    class _Default_allocator_traits
    { // allocator traits using builtins
private:

    _Default_allocator_traits()
        {
        }

public:

    static void * _Allocate(const size_t _Size)
        {
        return ::operator new(_Size * sizeof(_Ty));
        }

    static void _Deallocate(void * _Ptr, const size_t _Size)
        {
        ::operator delete(_Ptr, _Size * sizeof(_Ty));
        }

    };

        // CLASS TEMPLATE allocator
template<class _Ty,
    class _Traits = _Default_allocator_traits<_Ty>>
    class allocator
    { // generic allocator for objects of class _Ty
public:
	using value_type = _Ty;
	using pointer = value_type *;
	using size_type = size_t;

    allocator()
        {
        }

    ~allocator()
        {
        }

    pointer allocate(const size_type _Count) const
        {
        pointer _Array = (pointer)_Traits::_Allocate(_Count);
        return _Array;
        }

    void deallocate(pointer _Ptr, const size_type _Count) const
        {
        _Traits::_Deallocate(_Ptr, _Count);
        }

    };

_NSTD_END

#endif // _XNSMEM0_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V2.0:0001 */

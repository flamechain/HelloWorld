#pragma once
#ifndef _XNSMEM0_
#define _XNSMEM0_

typedef unsigned long long size_t;

template<class _Ty>
    class allocator
    {
public:
	using value_type = _Ty;
	using pointer = value_type *;
	using const_pointer = const value_type *;
	using size_type = size_t;

    allocator()
        {
        }

    pointer allocate(size_type _Count) const
        {
        pointer _New_array = new value_type[_Count];
        return _New_array;
        }

    void deallocate(pointer const _Ptr) const
        {
        delete[] _Ptr;
        }

    void deallocate(const_pointer const _Ptr) const
        {
        delete[] _Ptr;
        }

    pointer expand(pointer const _Ptr, size_type _Size, size_type _Increase) const
        {
        const size_type _New_capacity = _Size + _Increase;
        pointer _New_ptr = this->allocate(_New_capacity);

        for (size_type i=0; i<_Size; i++)
            {
            _New_ptr[i] = _Ptr[i];
            }

        return _New_ptr;
        }

    };

#endif

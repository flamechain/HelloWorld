// NSLib memory internal header
#pragma once
#ifndef _XNSMEM0_
#define _XNSMEM0_

#include <xnsdef>

namespace nstd
    {

template<class _Ty>
    class allocator
    {
public:
	using value_type = _Ty;
	using pointer = value_type *;
	using size_type = size_t;

    allocator()
        {
        }

    ~allocator()
        {
        }

    pointer allocate(size_type _Count) const
        {
        pointer _Array = (pointer)_Allocate(sizeof(value_type) * _Count);
        return _Array;
        }

    void deallocate(pointer _Ptr, size_type _Count) const
        {
        _Deallocate(_Ptr, sizeof(value_type) * _Count);
        }

    };

    }

#endif

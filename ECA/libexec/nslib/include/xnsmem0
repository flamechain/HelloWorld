// NSLib memory internal header
#pragma once
#ifndef _XNSMEM0_
#define _XNSMEM0_

#include <xnsdef>

// custom heap implementation would go here (if doing that)

_NSTD_BEGIN

    class _Allocator_traits
    {
private:

    _Allocator_traits()
        {
        }

public:

    static void * _Allocate(const size_t _Bytes)
        {
        return ::operator new(_Bytes);
        }

    static void _Deallocate(void * _Ptr, const size_t _Bytes)
        {
        ::operator delete(_Ptr, _Bytes);
        }

    };

template<class _Ty,
    class _Traits = _Allocator_traits>
    class allocator
    {
public:
	using value_type = _Ty;
	using pointer = value_type *;
	using size_type = size_t;

    allocator()
        {
        }

    ~allocator()
        {
        }

    pointer allocate(const size_type _Count) const
        {
        pointer _Array = (pointer)_Traits::_Allocate(sizeof(value_type) * _Count);
        return _Array;
        }

    void deallocate(pointer _Ptr, const size_type _Count) const
        {
        _Traits::_Deallocate(_Ptr, sizeof(value_type) * _Count);
        }

    };

_NSTD_END

#endif

// NSLib memory internal header
#pragma once
#ifndef _XNSMEM0_
#define _XNSMEM0_

#include <xnsdef>

#include <stdio.h>

// #define NS_USE_CUSTOM_HEAP

_NSTD_BEGIN

#ifndef _NSHEAP_
#pragma pack(push, 1)
#define _NSHEAP_CAP 32000
#define _NSHEAP_CHUNKS_CAP 1000 // chunks are 32 bytes

struct _Heap_chunk
    {
    size_t _Size;
    void * _Ptr;
    };

struct _Heap
    {
    char heap[_NSHEAP_CAP] = {0};
    void * heapptr = heap;
    _Heap_chunk chunks[_NSHEAP_CHUNKS_CAP];
    size_t size = 0;
    size_t chunk_size = 0;
    };

#if __cplusplus >= 201703L // >= C++17
inline _Heap HEAP;

inline void * nsmalloc(const size_t _Size)
    {
    if (_Size + HEAP.size >= _NSHEAP_CAP)
        {
        return nullptr;
        }

    if (HEAP.chunk_size + 1 >= _NSHEAP_CHUNKS_CAP)
        {
        return nullptr;
        }

    void * _Myptr = &HEAP.heap + HEAP.size;
    // printf("ptr in array: %i", ((int *)_Myptr - (int *)_Heapptr));
    _Heap_chunk _Chunk = {_Size, _Myptr};

    HEAP.size += _Size;
    // printf("heap size: %i\n", _Heap_size);
    HEAP.chunks[HEAP.chunk_size++] = _Chunk;

    return _Myptr;
    }

inline void nsfree(void * _Ptr, const size_t _Size)
    {
    }

inline void nsfree(void * _Ptr)
    {
    }

#else
#ifdef NS_USE_CUSTOM_HEAP
#error NSHeap requires C++17 or greater
#endif // NS_USE_CUSTOM_HEAP
inline void * nsmalloc(size_t);
inline void nsfree(void *, const size_t);
#endif // __cplusplus >= 201703L

#pragma pack(pop)
#endif // _NSHEAP_

        // CLASS TEMPLATE _NSTD_allocator_traits
template<class _Ty>
    class _NSTD_allocator_traits
    { // allocator traits using nslib heap
private:

    _NSTD_allocator_traits()
        {
        }

public:

    static void * _Allocate(const size_t _Size)
        {
        return nsmalloc(_Size * sizeof(_Ty));
        }

    static void _Deallocate(void * _Ptr, const size_t _Size)
        {
        nsfree(_Ptr, _Size * sizeof(_Ty));
        }

    };

        // CLASS TEMPLATE _STD_allocator_traits
template<class _Ty>
    class _STD_allocator_traits
    { // allocator traits using builtins
private:

    _STD_allocator_traits()
        {
        }

public:

    static void * _Allocate(const size_t _Size)
        {
        return ::operator new(_Size * sizeof(_Ty));
        }

    static void _Deallocate(void * _Ptr, const size_t _Size)
        {
        ::operator delete(_Ptr, _Size * sizeof(_Ty));
        }

    };

#ifdef NS_USE_CUSTOM_HEAP
 template<class _Ty>
 using _Default_allocator_traits = _NSTD_allocator_traits<_Ty>;
#else
 template<class _Ty>
 using _Default_allocator_traits = _STD_allocator_traits<_Ty>;
#endif // NS_USE_CUSTOM_HEAP

        // CLASS TEMPLATE allocator
template<class _Ty,
    class _Traits = _Default_allocator_traits<_Ty>>
    class allocator
    { // generic allocator for objects of class _Ty
public:
	using value_type = _Ty;
	using pointer = value_type *;
	using size_type = size_t;

    allocator()
        {
        }

    ~allocator()
        {
        }

    pointer allocate(const size_type _Count) const
        {
        pointer _Array = (pointer)_Traits::_Allocate(_Count);
        return _Array;
        }

    void deallocate(pointer _Ptr, const size_type _Count) const
        {
        _Traits::_Deallocate(_Ptr, _Count);
        }

    };

_NSTD_END

#endif // _XNSMEM0_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V2.0:0003 */

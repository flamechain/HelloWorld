// NSLib def internal header
#pragma once
#ifndef _XNSDEF_
#define _XNSDEF_

#ifndef _STD
#define _STD std::
#endif

#define _NSTD nstd::
#define _NSTD_BEGIN namespace nstd {
#define _NSTD_END }

_NSTD_BEGIN

typedef unsigned long long size_t;

        // FUNCTION TEMPLATE addressof
template<class _Ty>
    inline const _Ty * addressof(_Ty& _Val)
    {
    return __builtin_addressof(_Val);
    }

        // FUNCTION TEMPLATE copyinto
template<class _Ty>
    inline void copyinto(_Ty * _Left, const _Ty * _Right, size_t _Right_size)
    {
    for (size_t i=0; i<_Right_size; i++)
        {
        _Left[i] = _Right[i];
        }
    }

    inline size_t posindex(long long _Index, size_t _Size)
    {
    if (_Index < 0)
        {
        _Index += _Size;
        }
    if (_Index < 0)
        {
        _Index = 0;
        }

    size_t _Pos = _Index;
    return _Pos;
    }

_NSTD_END

#endif // _XNSDEF_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V1.0:0003 */

// NSLib map header
#pragma once
#ifndef _NSMAP_
#define _NSMAP_

#error NSMap has not been implemented yet

#include <xnsdef>
#include <xnsmem0>

using _NSTD allocator;

        // CLASS TEMPLATE pair
template<class _Kty,
    class _Ty>
    class pair
    { // store a pair of values
public:

    pair()
        {
        }
    };

        // CLASS TEMPLATE less
template<class _Ty>
    class less
    { // functor for operator<
private:

public:

    less()
        {
        }
    };

        // CLASS TEMPLATE _Map_alloc
template<class _Kty,
    class _Ty,
    class _Alloc = allocator<pair<const _Kty, _Ty>>>
    class _Map_alloc
    { // base class for map to hold allocator
public:
    using _Alty = _Alloc;

    using key_type = _Kty;
    using mapped_type = _Ty;
    using size_type = _NSTD size_t;

private:
    _Alty _AL;

public:

    _Map_alloc()
        {
        this->_Moveal(_Alloc());
        }

    _Map_alloc(const _Alty& _Al)
        {
        this->_Moveal(_Al);
        }

    ~_Map_allolc()
        {
        }

    void _Moveal(const _Alty& _Al)
        {
        this->_AL = _Al;
        }

    _Alty _Getal() const
        {
        return this->_AL;
        }

    };

        // CLASS TEMPLATE map
template<class _Kty,
    class _Ty,
    class _Pr = less<_Kty>,
    class _Alloc = allocator<pair<const _Kty, _Ty>>>
    class map
        : _Map_alloc<_Kty, _Ty, _Alloc>
    { // ordered collection of {key, mapped} values, unique keys
private:
    using _Mybase = _Map_alloc<_Kty, _Ty, _Alloc>;
    using _Alty = typename _Mybase::_Alty;

    using key_type = typename _Mybase::key_type;
    using mapped_type = typename _Mybase::mapped_type;
    using size_type = typename _Mybase::size_type;
    using key_compare = _Pr;

public:

    map() noexcept
        : _Mybase()
        {
        }

    explicit map(const _Alty& _Al) noexcept
        : _Mybase(_Al)
        {
        }

    ~map()
        {
        }

    };

#endif // _NSMAP_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V1.0:0002 */

// NSLib map header
#pragma once
#ifndef _NSMAP_
#define _NSMAP_

#error NSMap has not been implemented yet

#include <xnsdef>
#include <xnsmem0>

using _NSTD allocator;

        // CLASS TEMPLATE pair
template<class _Kty,
    class _Ty>
    class pair
    { // store a pair of values
public:

    pair()
        {
        }
    };

        // CLASS TEMPLATE compare
template<class _Ty>
    class compare
    { // functor for operator==
private:

public:

    less()
        {
        }
    };

        // CLASS TEMPLATE map
template<class _Kty,
    class _Ty,
    class _Pr = compare<_Kty>, // using compare instead of less
    class _Alloc = allocator<pair<const _Kty, _Ty>>>
    class map
    { // ordered collection of {key, mapped} values, unique keys
private:
    using _Mybase = _Alloc;
    using allocatr_type = _Alloc;

    using key_type = _Kty;
    using mapped_type = _Ty;
    using key_compare = _Pr;
    using size_type = typename _Mybase::size_type;

public:

    map()
        {
        }

    map(const map& _Right)
        {
        }

    };

#endif // _NSMAP_

/*
 * Copyright (c) by R. Wilson. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V1.0:0001 */

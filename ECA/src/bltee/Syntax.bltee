/* Highlights new features and changes that make this the best language to ever exist */

#pragma CollectStartIndex 0 // 1 is default, but you can make it start at 0 to be more similar to most languages (not recommended though)

include "example.bltee"; // doesn't copy paste like a header, but loads in references and functions to be used by this file
// not a preprocess statement, those dont exist
// no header files
// similar to C# using, but uses library-absolute-relative priority path checking
// maybe change to be even closer to C# to be able to use singular classes or namespaces within file? want to do this and accomodate the C-style pathing system

const int myint = 16; // has to be defined at declaration time, search and replace system implemented (basically preprocess constant)
readonly int myint2; // can be changed once, then only read from or interacted with (like class methods) but not changed
// difference between readonly & const is that readonly an be declared before defined, and it is an actualy variable not a drop-in replacement

// data class (struct replacement) normal classes are the same (automatically struct conversion under the hood)
// no syntax difference than normal classes
class MyClass {
    int mynum;
    string mystr;
    float mydec;
}

// C# ref instead of pointers
int MyFunc(int ref var, int ref var2) {
    var = 7;
    var2 = 8;
    return 0;
}

int main() {
    // variables without definition are default to null, not 0
    // just a compiler abstraction, there is no value

    // only used if you want the extra bit
    uint myunum; // this is a physical concern, but so is a limit on ints so this is necessary

    int mynum; // auto-sized, gets bigger up to 64-bit if necessary
    float myfloat; // auto-sized, always signed
    string mystr; // string support "fundamental"
    dict mydict; // dict is a "fundamental"; compiler chooses if it is ordered/unordered

    string mymulti = "
    test
    
    test"; // allowed to do multiline strings

    // 'string ref' instead of 'ref string', makes more sense when reading out: string reference / string pointer
    string ref myref; // reference, not pointer value but null
    int ref myref2; // not a pointer-array but only used as pointer

    int error = MyFunc(myref2, ref mynum);

    collect[constsize auto int] myarr;  // "collection" array that is also vector that switches to linked list if needed
                                        // constsize means that it can stay an array because the int type wont grow
                                        // auto means to automatically calculate how big the int type needs to because
    collect[constsize 16 int] myarr2;   // stays 16-bit
    collect[string] myarr3;             // strings are never constsize
    collect[float] myarr4;              // not const size (meaning it might switch to linked list)
    
    int myint = 9999999999999999999; // store ints back-to-back to simulate infinte int size

    return 0;
}

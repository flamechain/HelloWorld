Sprint Goals:

    [ ] First pass of assembler
    [ ] Second pass of assembler
    [ ] Third pass? (for struct analysis) and binary output

Todo:

    * fix all warnings in NSLib and assembler and cpu
    * fix nsstring and nsvector undefined behaviour bugs
    * reserach SAL (etc. _In_z_) and see why is causes crash
    * replace return .*;\n with return (.*);\n somehow automatically?
    * add heap implementation to xnsmem0
    * make ecc work with powershell and cmd instead of just bash
    * let nsstring handle format strings somehow
    * make regex library or add regex parsing to nsstring
    * add argument to CPU to specifiy file to treat as disk
    * add ECA argument to explicitly tell what the file is (G, Assembly)
    * linter for EAS, G?

  - Considering
    * add contributing doc
    * add pull request template
    * move nslib into another repo when relatively complete (no know bugs, linked list, map, heap?, etc.)
    * reworking bin/ folder structure to use dist (maybe just in WorldOS thus more accurate folder name because it only contains iso's)
    * breaking nslib into nstl and nstd (ns template lib and ns lib)
    * renaming strip to remove, and make strip treat string as list of chars to remove
    * adding print() to nsio with nsstring compatibility (nsio is currently just fio) using write()
    * adding nslib to nstd namespace (to no conflict with std headers)
    * making _Char_traits a struct instead of a static class
    * adding private variables to _Traits class (nslib)

Long Term:

    * finish robust template library (NSLib)
        * Vector
        * String
        ✓ Hash Table (map/dict)
        ✓ Linked List
        ✓ (not actually a template) FileIO
    * finish assembler and compiler (C++ implementation)
        * assemble assembly (eas,asm,s,as) files
        * compile and assemble G (g,gl) files
        * link object (obj,o) files?
        * make standard headers for WIN64 & WOS32
    * create OS
        * threading (simulated, cpu is single-threaded)
        * fileio
        * keyboard input
        * screen output
        * assembler and compiler written in OS so you can compile programs and run them completely in OS
        * GUI: basically MSDos-esc terminal
    * CPU
        * finish instruction set
        * finish gdt and idt architecture
    * Document everything
        * text documents and markdown in repo
        * trello board to record features (and issues)

Extra:

    * add G++ to ECA
        * G with classes (basically)
          not adding this to G because classes are farther away from assembly
          same goes for other c++-like additions e.g. references

Previous Sprints:

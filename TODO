Sprint Goals:

    * Fix nsstring and nsvector bug
    * First pass of assembler
    ✓ Make G and Asm syntax

Todo:

    * replace return .*;\n with return (.*);\n somehow automatically?
    * add nullterminated in specifier to string methods that accept const char * const
    * add nslib linked list implementation
    * add heap implementation to xnsmem0
    * add nslib map implementation
    * make ecc work with powershell and cmd instead of just bash
    * let nsstring handle format strings somehow
    * make regex library or add regex parsing to nsstring
    * add argument to CPU to specifiy file to treat as disk
    * add ECA argument to explicitly tell what the file is (G, Assembly)

    * add contributing doc?
    * move nslib into another repo when relatively complete (no know bugs, linked list, map, heap?, etc.)
    * maybe pull request template?

    * consider reworking bin/ folder structure to use dist (maybe just in WorldOS thus more accurate folder name because it only contains iso's)
    * consider breaking nslib into nstl and nstd (ns template lib and ns lib)
    * consider renaming strip to remove, and make strip treat string as list of chars to remove
    * consider adding print() to nsio with nsstring compatibility (nsio is currently just fio) using write()
    * consider adding nslib to nstd namespace (to no conflict with std headers)
    * consider making _Char_traits a struct instead of a static class
    * consider adding private variables to _Traits class (nslib)

Long Term:

    * finish robust template library (NSLib)
        * Vector
        * String
        * Hash Table (map/dict)
        * Linked List
        ✓ (not actually a template) FileIO
    * finish assembler and compiler (C++ implementation)
        * assemble assembly (eas,asm,s,as) files
        * compile and assemble G (g,gl) files
        * link object (obj,o) files?
        * make standard headers for WIN64 & WOS32
    * create OS
        * threading (simulated, cpu is single-threaded)
        * fileio
        * keyboard input
        * screen output
        * assembler and compiler written in OS so you can compile programs and run them completely in OS
        * GUI: basically MSDos-esc terminal
    * CPU
        * finish instruction set
        * finish gdt and idt architecture
    * Document everything
        * text documents and markdown in repo
        * trello board to record features (and issues)

Extra:

    * add G++ to ECA
        * G with classes (basically)
          not adding this to G because classes are farther away from assembly

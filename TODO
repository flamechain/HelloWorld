Todo:

    * find out if function aliasing in template class is possible
    * add negative indexing to string and vector classes
    * create first pass of assembler
    * add argument to CPU to specifiy file to treat as disk
    * add ECA argument to explicitly tell what the file is (G, Assembly)

    * consider seperating private data variables into a _Traits class

Long Term:

    * finish assembler and compiler (C++ implementation)
    * create OS
        * threading (simulated, cpu is single-threaded)
        * fileio
        * basic terminal (MSDos similar)
        * assembler and compiler written in OS so you can compile programs and run them completely in OS
    * CPU
        * finish instruction set
        * finish gdt and idt architecture

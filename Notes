Things Learned:

    * Transparent array means that the collection of elements is stored as an actual array accessible by the user
    * `noexcept` keyword helps compiler optimization (mostly if not only in constructors and assignment (operator=))
    * Classes with templates are a skeleton of a class
      e.g. myclass is not a class but rather a skeleton, but myclass<_Ty> is a class
    * `free()` function is only used with `malloc()` pointers
    * `delete` operator is only used with `new` pointers (delete[] and new[] as well)
    * everything allocated on the heap (new or malloc) needs to be deallocated at the end of scope
    * Constructer only accounts for first initalization
      have to add operator= if you want to have object have the ability to reinitalize
    * Using another overload in itself (e.g. myFunc(int) uses myFunc(int, int)) is not bad practice

Other Notes:

    * Not looking at standard header functions too much to encourage adding functions as needed, and as wanted instead of being biased closer to standard headers
    * Not sure if my map implementation is a red-black tree, do more research on this form of binary tree
    * String is very similar to a Vector, because both are an array of _Elem that can change size
    * Making every method and parameter const in possible (just prevents accidently modifying values you didn't want to change when writing the function declaration)
